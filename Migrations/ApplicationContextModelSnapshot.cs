// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using WebApplication2.model;

#nullable disable

namespace WebApplication2.Migrations
{
    [DbContext(typeof(ApplicationContext))]
    partial class ApplicationContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.8")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("WebApplication2.model.Customer", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Customers");
                });

            modelBuilder.Entity("WebApplication2.model.Order", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<string>("Customer_IdId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("Order_Date")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("Customer_IdId");

                    b.ToTable("Orders");
                });

            modelBuilder.Entity("WebApplication2.model.Order_SKU", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<string>("SKU_IdId")
                        .HasColumnType("text");

                    b.Property<decimal>("amount")
                        .HasColumnType("numeric");

                    b.Property<string>("order_idId")
                        .HasColumnType("text");

                    b.Property<decimal>("sum")
                        .HasColumnType("numeric");

                    b.HasKey("Id");

                    b.HasIndex("SKU_IdId");

                    b.HasIndex("order_idId");

                    b.ToTable("Order_SKUs");
                });

            modelBuilder.Entity("WebApplication2.model.SKU", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<string>("Category_idId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<decimal>("price")
                        .HasColumnType("numeric");

                    b.HasKey("Id");

                    b.HasIndex("Category_idId");

                    b.ToTable("SKUs");
                });

            modelBuilder.Entity("WebApplication2.model.SKU_Category", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("SKU_Categories");
                });

            modelBuilder.Entity("WebApplication2.model.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("WebApplication2.model.Order", b =>
                {
                    b.HasOne("WebApplication2.model.Customer", "Customer_Id")
                        .WithMany("Orders")
                        .HasForeignKey("Customer_IdId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Customer_Id");
                });

            modelBuilder.Entity("WebApplication2.model.Order_SKU", b =>
                {
                    b.HasOne("WebApplication2.model.SKU", "SKU_Id")
                        .WithMany()
                        .HasForeignKey("SKU_IdId");

                    b.HasOne("WebApplication2.model.Order", "order_id")
                        .WithMany("Order_SKUs")
                        .HasForeignKey("order_idId");

                    b.Navigation("SKU_Id");

                    b.Navigation("order_id");
                });

            modelBuilder.Entity("WebApplication2.model.SKU", b =>
                {
                    b.HasOne("WebApplication2.model.SKU_Category", "Category_id")
                        .WithMany("SKUs")
                        .HasForeignKey("Category_idId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Category_id");
                });

            modelBuilder.Entity("WebApplication2.model.Customer", b =>
                {
                    b.Navigation("Orders");
                });

            modelBuilder.Entity("WebApplication2.model.Order", b =>
                {
                    b.Navigation("Order_SKUs");
                });

            modelBuilder.Entity("WebApplication2.model.SKU_Category", b =>
                {
                    b.Navigation("SKUs");
                });
#pragma warning restore 612, 618
        }
    }
}
